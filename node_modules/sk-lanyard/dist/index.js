import*as e from"svelte/store";var n={};(()=>{n.d=(e,t)=>{for(var r in t){if(n.o(t,r)&&!n.o(e,r)){Object.defineProperty(e,r,{enumerable:true,get:t[r]})}}}})();(()=>{n.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n)})();if(typeof n!=="undefined")n.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var t={};n.d(t,{D:()=>s,q:()=>useLanyard});var x=e=>{var t={};n.d(t,e);return t};var y=e=>()=>e;const r=x({["readable"]:()=>e.readable});var s;(function(e){e[e["EVENT"]=0]="EVENT";e[e["HELLO"]=1]="HELLO";e[e["INITIALIZE"]=2]="INITIALIZE";e[e["HEARTBEAT"]=3]="HEARTBEAT"})(s||(s={}));const a="https://api.lanyard.rest/v1";const o="wss://api.lanyard.rest/socket";function useLanyard(e){if(e.method==="rest"){const n=(0,r.readable)(undefined,(n=>{lanyardRest(e,n)}));return n}if(e.method==="ws"){if("id"in e){const n=(0,r.readable)(undefined,(n=>{lanyardWS(e,n)}));return n}const n=(0,r.readable)(undefined,(n=>{lanyardWS(e,n)}));return n}}async function lanyardRest(e,n){if(typeof window==="undefined"){return}const t=e.restUrl??a;const lanyardFetch=async()=>await fetch(`${t}/users/${e.id}`).then((e=>e.json()));const updateStore=async()=>{const e=await lanyardFetch();if(e.success){n(e.data)}else{throw new Error(e.error.message)}};updateStore();setInterval(updateStore,e.pollInterval??5e3)}async function lanyardWS(e,n){if(typeof window==="undefined"){return}const t=e.wsUrl??o;const r=new WebSocket(t);const send=e=>r.send(JSON.stringify(e));const recv=e=>{r.addEventListener("message",e)};const once=()=>new Promise((e=>{const fn=n=>{r.removeEventListener("message",fn);e(JSON.parse(n.data))};r.addEventListener("message",fn)}));const waitInit=()=>new Promise(((e,n)=>{const open=()=>{r.removeEventListener("open",open);e()};r.addEventListener("open",open);const err=()=>{r.removeEventListener("error",err);n()};r.addEventListener("error",err)}));await waitInit();if("all"in e){send({op:s.INITIALIZE,d:{subscribe_to_all:true}})}if("ids"in e){send({op:s.INITIALIZE,d:{subscribe_to_ids:e.ids}})}if("id"in e){send({op:s.INITIALIZE,d:{subscribe_to_id:e.id}})}const a=await once();const d=a.d.heartbeat_interval;const heartbeat=()=>{send({op:s.HEARTBEAT,d:undefined})};setInterval(heartbeat,d);const i=await once();const c=i.d;n(c);recv((e=>{const t=JSON.parse(e.data);if("user_id"in t.d){const{user_id:e,...r}=t.d;c[t.d.user_id]=r;n(c)}else{n({...t.d})}}))}var d=t.D;var i=t.q;export{d as LanyardOpcode,i as useLanyard};